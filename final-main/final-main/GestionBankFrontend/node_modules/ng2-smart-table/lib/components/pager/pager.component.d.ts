import { EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import { Subscription } from 'rxjs';
import { DataSource } from '../../lib/data-source/data-source';
import * as ɵngcc0 from '@angular/core';
export declare class PagerComponent implements OnChanges {
    source: DataSource;
    perPageSelect: any[];
    changePage: EventEmitter<any>;
    currentPerPage: any;
    protected pages: Array<any>;
    protected page: number;
    protected count: number;
    protected perPage: number;
    protected dataChangedSub: Subscription;
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * We change the page here depending on the action performed against data source
     * if a new element was added to the end of the table - then change the page to the last
     * if a new element was added to the beginning of the table - then to the first page
     * @param changes
     */
    processPageChange(changes: any): void;
    shouldShow(): boolean;
    paginate(page: number): boolean;
    next(): boolean;
    prev(): boolean;
    getPage(): number;
    getPages(): Array<any>;
    getLast(): number;
    isPageOutOfBounce(): boolean;
    initPages(): void;
    onChangePerPage(event: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PagerComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PagerComponent, "ng2-smart-table-pager", never, { "perPageSelect": "perPageSelect"; "source": "source"; }, { "changePage": "changePage"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBhZ2VyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBEYXRhU291cmNlIH0gZnJvbSAnLi4vLi4vbGliL2RhdGEtc291cmNlL2RhdGEtc291cmNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBhZ2VyQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgICBzb3VyY2U6IERhdGFTb3VyY2U7XG4gICAgcGVyUGFnZVNlbGVjdDogYW55W107XG4gICAgY2hhbmdlUGFnZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgY3VycmVudFBlclBhZ2U6IGFueTtcbiAgICBwcm90ZWN0ZWQgcGFnZXM6IEFycmF5PGFueT47XG4gICAgcHJvdGVjdGVkIHBhZ2U6IG51bWJlcjtcbiAgICBwcm90ZWN0ZWQgY291bnQ6IG51bWJlcjtcbiAgICBwcm90ZWN0ZWQgcGVyUGFnZTogbnVtYmVyO1xuICAgIHByb3RlY3RlZCBkYXRhQ2hhbmdlZFN1YjogU3Vic2NyaXB0aW9uO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFdlIGNoYW5nZSB0aGUgcGFnZSBoZXJlIGRlcGVuZGluZyBvbiB0aGUgYWN0aW9uIHBlcmZvcm1lZCBhZ2FpbnN0IGRhdGEgc291cmNlXG4gICAgICogaWYgYSBuZXcgZWxlbWVudCB3YXMgYWRkZWQgdG8gdGhlIGVuZCBvZiB0aGUgdGFibGUgLSB0aGVuIGNoYW5nZSB0aGUgcGFnZSB0byB0aGUgbGFzdFxuICAgICAqIGlmIGEgbmV3IGVsZW1lbnQgd2FzIGFkZGVkIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIHRhYmxlIC0gdGhlbiB0byB0aGUgZmlyc3QgcGFnZVxuICAgICAqIEBwYXJhbSBjaGFuZ2VzXG4gICAgICovXG4gICAgcHJvY2Vzc1BhZ2VDaGFuZ2UoY2hhbmdlczogYW55KTogdm9pZDtcbiAgICBzaG91bGRTaG93KCk6IGJvb2xlYW47XG4gICAgcGFnaW5hdGUocGFnZTogbnVtYmVyKTogYm9vbGVhbjtcbiAgICBuZXh0KCk6IGJvb2xlYW47XG4gICAgcHJldigpOiBib29sZWFuO1xuICAgIGdldFBhZ2UoKTogbnVtYmVyO1xuICAgIGdldFBhZ2VzKCk6IEFycmF5PGFueT47XG4gICAgZ2V0TGFzdCgpOiBudW1iZXI7XG4gICAgaXNQYWdlT3V0T2ZCb3VuY2UoKTogYm9vbGVhbjtcbiAgICBpbml0UGFnZXMoKTogdm9pZDtcbiAgICBvbkNoYW5nZVBlclBhZ2UoZXZlbnQ6IGFueSk6IHZvaWQ7XG59XG4iXX0=