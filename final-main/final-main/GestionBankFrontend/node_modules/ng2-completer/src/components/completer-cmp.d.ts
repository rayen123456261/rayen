import { AfterViewChecked, ChangeDetectorRef, EventEmitter, AfterViewInit, ElementRef } from "@angular/core";
import { ControlValueAccessor, FormControl } from "@angular/forms";
import { CtrCompleter } from "../directives/ctr-completer";
import { CompleterData } from "../services/completer-data";
import { CompleterService } from "../services/completer-service";
import { CompleterItem } from "./completer-item";
import * as ɵngcc0 from '@angular/core';
export declare class CompleterCmp implements ControlValueAccessor, AfterViewChecked, AfterViewInit {
    private completerService;
    private cdr;
    dataService: CompleterData | undefined;
    inputName: string;
    inputId: string;
    pause: number;
    minSearchLength: number;
    maxChars: number;
    overrideSuggested: boolean;
    clearSelected: boolean;
    clearUnselected: boolean;
    fillHighlighted: boolean;
    placeholder: string;
    matchClass: string | undefined;
    fieldTabindex: number | undefined;
    autoMatch: boolean;
    disableInput: boolean;
    inputClass: string | undefined;
    autofocus: boolean;
    openOnFocus: boolean;
    openOnClick: boolean;
    selectOnClick: boolean;
    selectOnFocus: boolean;
    initialValue: any;
    autoHighlight: boolean;
    selected: EventEmitter<CompleterItem>;
    highlighted: EventEmitter<CompleterItem>;
    blurEvent: EventEmitter<void>;
    click: EventEmitter<void>;
    focusEvent: EventEmitter<void>;
    opened: EventEmitter<boolean>;
    keyup: EventEmitter<any>;
    keydown: EventEmitter<any>;
    completer: CtrCompleter | undefined;
    ctrInput: ElementRef | undefined;
    control: FormControl;
    displaySearching: boolean;
    displayNoResults: boolean;
    _textNoResults: string;
    _textSearching: string;
    private _onTouchedCallback;
    private _onChangeCallback;
    private _focus;
    private _open;
    private _searchStr;
    constructor(completerService: CompleterService, cdr: ChangeDetectorRef);
    get value(): any;
    set value(v: any);
    get searchStr(): string;
    set searchStr(value: string);
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    onTouched(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    set datasource(source: CompleterData | string | any[]);
    set textNoResults(text: string);
    set textSearching(text: string);
    onBlur(): void;
    onFocus(): void;
    onClick(event: any): void;
    onKeyup(event: any): void;
    onKeydown(event: any): void;
    onChange(value: string): void;
    open(): void;
    close(): void;
    focus(): void;
    blur(): void;
    isOpen(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CompleterCmp, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CompleterCmp, "ng2-completer", never, { "inputName": "inputName"; "inputId": "inputId"; "pause": "pause"; "minSearchLength": "minSearchLength"; "maxChars": "maxChars"; "overrideSuggested": "overrideSuggested"; "clearSelected": "clearSelected"; "clearUnselected": "clearUnselected"; "fillHighlighted": "fillHighlighted"; "placeholder": "placeholder"; "autoMatch": "autoMatch"; "disableInput": "disableInput"; "autofocus": "autofocus"; "openOnFocus": "openOnFocus"; "openOnClick": "openOnClick"; "selectOnClick": "selectOnClick"; "selectOnFocus": "selectOnFocus"; "autoHighlight": "autoHighlight"; "datasource": "datasource"; "dataService": "dataService"; "textNoResults": "textNoResults"; "textSearching": "textSearching"; "matchClass": "matchClass"; "fieldTabindex": "fieldTabindex"; "inputClass": "inputClass"; "initialValue": "initialValue"; }, { "selected": "selected"; "highlighted": "highlighted"; "blurEvent": "blur"; "click": "click"; "focusEvent": "focus"; "opened": "opened"; "keyup": "keyup"; "keydown": "keydown"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGxldGVyLWNtcC5kLnRzIiwic291cmNlcyI6WyJjb21wbGV0ZXItY21wLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdDaGVja2VkLCBDaGFuZ2VEZXRlY3RvclJlZiwgRXZlbnRFbWl0dGVyLCBBZnRlclZpZXdJbml0LCBFbGVtZW50UmVmIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBGb3JtQ29udHJvbCB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xuaW1wb3J0IHsgQ3RyQ29tcGxldGVyIH0gZnJvbSBcIi4uL2RpcmVjdGl2ZXMvY3RyLWNvbXBsZXRlclwiO1xuaW1wb3J0IHsgQ29tcGxldGVyRGF0YSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb21wbGV0ZXItZGF0YVwiO1xuaW1wb3J0IHsgQ29tcGxldGVyU2VydmljZSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb21wbGV0ZXItc2VydmljZVwiO1xuaW1wb3J0IHsgQ29tcGxldGVySXRlbSB9IGZyb20gXCIuL2NvbXBsZXRlci1pdGVtXCI7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDb21wbGV0ZXJDbXAgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciwgQWZ0ZXJWaWV3Q2hlY2tlZCwgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgcHJpdmF0ZSBjb21wbGV0ZXJTZXJ2aWNlO1xuICAgIHByaXZhdGUgY2RyO1xuICAgIGRhdGFTZXJ2aWNlOiBDb21wbGV0ZXJEYXRhIHwgdW5kZWZpbmVkO1xuICAgIGlucHV0TmFtZTogc3RyaW5nO1xuICAgIGlucHV0SWQ6IHN0cmluZztcbiAgICBwYXVzZTogbnVtYmVyO1xuICAgIG1pblNlYXJjaExlbmd0aDogbnVtYmVyO1xuICAgIG1heENoYXJzOiBudW1iZXI7XG4gICAgb3ZlcnJpZGVTdWdnZXN0ZWQ6IGJvb2xlYW47XG4gICAgY2xlYXJTZWxlY3RlZDogYm9vbGVhbjtcbiAgICBjbGVhclVuc2VsZWN0ZWQ6IGJvb2xlYW47XG4gICAgZmlsbEhpZ2hsaWdodGVkOiBib29sZWFuO1xuICAgIHBsYWNlaG9sZGVyOiBzdHJpbmc7XG4gICAgbWF0Y2hDbGFzczogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgIGZpZWxkVGFiaW5kZXg6IG51bWJlciB8IHVuZGVmaW5lZDtcbiAgICBhdXRvTWF0Y2g6IGJvb2xlYW47XG4gICAgZGlzYWJsZUlucHV0OiBib29sZWFuO1xuICAgIGlucHV0Q2xhc3M6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICBhdXRvZm9jdXM6IGJvb2xlYW47XG4gICAgb3Blbk9uRm9jdXM6IGJvb2xlYW47XG4gICAgb3Blbk9uQ2xpY2s6IGJvb2xlYW47XG4gICAgc2VsZWN0T25DbGljazogYm9vbGVhbjtcbiAgICBzZWxlY3RPbkZvY3VzOiBib29sZWFuO1xuICAgIGluaXRpYWxWYWx1ZTogYW55O1xuICAgIGF1dG9IaWdobGlnaHQ6IGJvb2xlYW47XG4gICAgc2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjxDb21wbGV0ZXJJdGVtPjtcbiAgICBoaWdobGlnaHRlZDogRXZlbnRFbWl0dGVyPENvbXBsZXRlckl0ZW0+O1xuICAgIGJsdXJFdmVudDogRXZlbnRFbWl0dGVyPHZvaWQ+O1xuICAgIGNsaWNrOiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gICAgZm9jdXNFdmVudDogRXZlbnRFbWl0dGVyPHZvaWQ+O1xuICAgIG9wZW5lZDogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xuICAgIGtleXVwOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBrZXlkb3duOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBjb21wbGV0ZXI6IEN0ckNvbXBsZXRlciB8IHVuZGVmaW5lZDtcbiAgICBjdHJJbnB1dDogRWxlbWVudFJlZiB8IHVuZGVmaW5lZDtcbiAgICBjb250cm9sOiBGb3JtQ29udHJvbDtcbiAgICBkaXNwbGF5U2VhcmNoaW5nOiBib29sZWFuO1xuICAgIGRpc3BsYXlOb1Jlc3VsdHM6IGJvb2xlYW47XG4gICAgX3RleHROb1Jlc3VsdHM6IHN0cmluZztcbiAgICBfdGV4dFNlYXJjaGluZzogc3RyaW5nO1xuICAgIHByaXZhdGUgX29uVG91Y2hlZENhbGxiYWNrO1xuICAgIHByaXZhdGUgX29uQ2hhbmdlQ2FsbGJhY2s7XG4gICAgcHJpdmF0ZSBfZm9jdXM7XG4gICAgcHJpdmF0ZSBfb3BlbjtcbiAgICBwcml2YXRlIF9zZWFyY2hTdHI7XG4gICAgY29uc3RydWN0b3IoY29tcGxldGVyU2VydmljZTogQ29tcGxldGVyU2VydmljZSwgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZik7XG4gICAgZ2V0IHZhbHVlKCk6IGFueTtcbiAgICBzZXQgdmFsdWUodjogYW55KTtcbiAgICBnZXQgc2VhcmNoU3RyKCk6IHN0cmluZztcbiAgICBzZXQgc2VhcmNoU3RyKHZhbHVlOiBzdHJpbmcpO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3Q2hlY2tlZCgpOiB2b2lkO1xuICAgIG9uVG91Y2hlZCgpOiB2b2lkO1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZDtcbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkO1xuICAgIHNldCBkYXRhc291cmNlKHNvdXJjZTogQ29tcGxldGVyRGF0YSB8IHN0cmluZyB8IGFueVtdKTtcbiAgICBzZXQgdGV4dE5vUmVzdWx0cyh0ZXh0OiBzdHJpbmcpO1xuICAgIHNldCB0ZXh0U2VhcmNoaW5nKHRleHQ6IHN0cmluZyk7XG4gICAgb25CbHVyKCk6IHZvaWQ7XG4gICAgb25Gb2N1cygpOiB2b2lkO1xuICAgIG9uQ2xpY2soZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgb25LZXl1cChldmVudDogYW55KTogdm9pZDtcbiAgICBvbktleWRvd24oZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgb25DaGFuZ2UodmFsdWU6IHN0cmluZyk6IHZvaWQ7XG4gICAgb3BlbigpOiB2b2lkO1xuICAgIGNsb3NlKCk6IHZvaWQ7XG4gICAgZm9jdXMoKTogdm9pZDtcbiAgICBibHVyKCk6IHZvaWQ7XG4gICAgaXNPcGVuKCk6IGJvb2xlYW47XG59XG4iXX0=